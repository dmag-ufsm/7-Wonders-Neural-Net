# -*- coding: utf-8 -*-
"""nn7Wonders.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h18obu_a-7kvfGuIwBdOSNd3u5mc8HcX
"""

import torch 
import torch.nn as nn 
import torch.nn.functional as F
from pathlib import Path

class Net(nn.Module):
  def __init__(self, input_size, hidden_size, num_classes):
    super(Net, self).__init__()
    self.net = nn.Sequential(
        nn.Linear(input_size, hidden_size),
        nn.Sigmoid(),
        nn.Linear(hidden_size, num_classes)
    )
  
  def forward(self, x):
    x = self.net(x)
    return x

model = Net(21, 42, 21)
print(model)

batch_size, input_size, hidden_size, num_classes = 64, 21, 42, 21

# Create random tensors for tests
x = torch.randn(batch_size, input_size)
y = torch.randn(batch_size, num_classes)

print(x)
print(y)

criterion = torch.nn.MSELoss(reduction='sum')
optimizer = torch.optim.SGD(model.parameters(), lr=1e-4)
for t in range(500):
  out = model(x)

  # compute and print loss
  loss = criterion(out, y)
  if t % 100 == 99:
    print(t, loss.item())
  
  # zero gradients, perform 
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

print(model.state_dict())

## this only works with python >= 3.5
## create models folder if not exists
Path("./models").mkdir(parents=True, exist_ok=True)

PATH = './models/seven_net.pth'
torch.save(model.state_dict(), PATH)